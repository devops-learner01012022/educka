#This user need not be part of LDAP or AD
mkdir -p /home/prod-user/certs

#Navigate to that Directory
cd /home/prod-user/certs

#Generate the Private key with Openssl 2048 bits
openssl genrsa -out prod-user.key 2048
 
#Create certificate signing request - required for CA . CN- Common Name - and O - Organization. Like the way that you provide your degree and rollnumber
openssl req -new -key prod-user.key -out prod-user.csr -subj "/CN=prod-user/O=devops"

# Check if the csr has been created
ls -l
cat prod-user.csr | base64 | tr -d '\n'


# You have to work with K8s csr object.
kubectl get csr

# Edit this file and paste your csr
vi https://github.com/devops-learner01012022/educka/raw/master/7-security/rbac/CertificateSigningRequest.yml
kubectl create -f https://github.com/devops-learner01012022/educka/raw/master/7-security/rbac/CertificateSigningRequest.yml
kubectl get csr

#Approve the request, to authenticate the user to login to cluster. These certs doesn't have any validity as it is being signed by our K8s.
kubectl certificate approve user1
kubectl get csr

# Now create role and rolebinding to the user
kubectl create role prodadmin --verb=get,list,watch,create --resource=pods,services --namespace default
kubectl get roles
kubectl describe role prodadmin
kubectl create rolebinding prodadminbinding --user=prod-user --role=prodadmin --namespace default

#Verify if we are able to work with prod-user
kubectl get pods --as prod-user
kubectl run pod1 --image nginx --as prod-user
kubectl create deploy dep1 --image nginx --as prod-user
kubectl delete role prodadmin
kubectl delete rolebinding prodadminbinding

# Cluster role and rolebinding, by default there are lot of cluster roles by default created by K8s.
kubectl get clusterroles
kubectl describe clusterrole admin
kubectl describe clusterrole view
kubectl create clusterrolebinding abcd --user=prod-user --clusterrole view

kubectl get all --all-namespaces --as prod-user
kubectl run pod1 --image nginx --as prod-user
kubectl get all --all-namespaces --as prod-user
kubectl run pod1 --image nginx -n kube-system --as prod-user

 
 
 31  kubectl get csr prod-user -o jsonpath="{.status.certificate}" | base64 --decode > prod-user.crt      ## this generates a crt file
 


   50  kubectl config get-contexts
   51  cd
   52  vi .kube/config
==== create a dummy context=====
   53  kubectl config get-contexts
   54  
   55*
   56  vi .kube/config
   57  kubectl config use-context testcluster
   58  kubectl config get-contexts
   59  kubectl get pods
   60  kubectl config use-context kubernetes-admin@kubernetes
  



#### To SEE Users : kubectl config view -o jsonpath='{.users[].name}' ;echo ""










